from tortoise import fields
from tortoise.models import Model
from tortoise.fields import ForeignKeyRelation

from aiogram.utils.deep_linking import create_start_link
from aiogram import Bot
from datetime import datetime, timedelta

class User(Model):
    id = fields.BigIntField(pk=True)  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = fields.CharField(
        max_length=32, null=True)  # @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
    is_block_bot = fields.BooleanField(default=False)
    # –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä 'en', 'ru'
    language_code = fields.CharField(max_length=10, null=False)
    balance = fields.DecimalField(
        max_digits=10, decimal_places=2, default=0.00)  # –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ban = fields.BooleanField(default=False)  # –ò–º–µ–µ—Ç –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
    referrer: ForeignKeyRelation['User'] = fields.ForeignKeyField(
        'models.User', related_name='referrals', null=True
    )  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    created_at = fields.DatetimeField(auto_now_add=True)

    _referals_cache = {}

    def __str__(self):
        return f"User(id={self.id}, username={self.username}, is_block_bot={self.is_block_bot}, language_code={self.language_code}, created_at={self.created_at}, balance={self.balance}, ban={self.ban}, referrer={self.referrer})"

    async def ref_program_info(self, bot: Bot) -> str:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        link = await create_start_link(bot, self.id, encode=True)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        now = datetime.now()
        start_of_today = datetime(now.year, now.month, now.day)
        start_of_week = start_of_today - \
            timedelta(days=start_of_today.weekday())  # –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏
        start_of_month = datetime(now.year, now.month, 1)  # –ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞

        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        ref_count_all_time = await self.referrals.all().count()  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        # –†–µ—Ñ–µ—Ä–∞–ª—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        ref_count_today = await self.referrals.filter(created_at__gte=start_of_today).count()
        # –†–µ—Ñ–µ—Ä–∞–ª—ã –∑–∞ –Ω–µ–¥–µ–ª—é
        ref_count_week = await self.referrals.filter(created_at__gte=start_of_week).count()
        # –†–µ—Ñ–µ—Ä–∞–ª—ã –∑–∞ –º–µ—Å—è—Ü
        ref_count_month = await self.referrals.filter(created_at__gte=start_of_month).count()

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –≤ HTML
        info = (
            f"<blockquote>üë§ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b></blockquote>\n"
            f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> <a href='{
                link}'>–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å</a>\n\n"
            f"üìÖ <b>–†–µ—Ñ–µ—Ä–∞–ª—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b> {ref_count_today}\n"
            f"üìÜ <b>–†–µ—Ñ–µ—Ä–∞–ª—ã –∑–∞ –Ω–µ–¥–µ–ª—é:</b> {ref_count_week}\n"
            f"üóìÔ∏è <b>–†–µ—Ñ–µ—Ä–∞–ª—ã –∑–∞ –º–µ—Å—è—Ü:</b> {ref_count_month}\n"
            f"üåü <b>–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {ref_count_all_time}"
        )
        return info

    async def my_referals(
        self,
        hide_id_length=4,
        hide_username_length=2,
        cache_minutes=1,
    ) -> str:
        cache_key = f"{self.id}_referals"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–µ—à–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cache_expiry = timedelta(minutes=cache_minutes)  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ - 1 –º–∏–Ω—É—Ç–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if cache_minutes and cache_key in self._referals_cache:
            cache_data = self._referals_cache[cache_key]
            cache_timestamp = cache_data["timestamp"]

            # –ï—Å–ª–∏ –∫–µ—à –∞–∫—Ç—É–∞–ª–µ–Ω
            if datetime.now() - cache_timestamp < cache_expiry:
                all_referals = cache_data["data"]
            else:
                del self._referals_cache[cache_key]
                all_referals = await self.referrals.all()
                self._referals_cache[cache_key] = {"data": all_referals, "timestamp": datetime.now()}
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –∫–µ—à–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            all_referals = await self.referrals.all()
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            if cache_minutes:
                self._referals_cache[cache_key] = {"data": all_referals, "timestamp": datetime.now()}

        AllReferalsInfo = "<b>üìú –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>\n"

        for ref in all_referals:
            ref_id = str(ref.id)
            ref_username = ref.username

            if hide_id_length:
                ref_id = f"{ref_id[:-hide_id_length]}{'*' * hide_id_length}" if len(ref_id) > hide_id_length else '*' * len(ref_id)

            if hide_username_length and ref_username:
                if hide_username_length == -1:
                    ref_username = f"{ref_username[0]}{'*' * (len(ref_username) - 2)}{ref_username[-1]}" if len(ref_username) > 2 else f"{ref_username[0]}*"
                else:
                    visible_length = max(1, len(ref_username) - hide_username_length)
                    ref_username = f"{ref_username[:visible_length]}{'*' * min(hide_username_length, len(ref_username))}"

            AllReferalsInfo += f"{ref_id} (@{ref_username})\n"

        return AllReferalsInfo